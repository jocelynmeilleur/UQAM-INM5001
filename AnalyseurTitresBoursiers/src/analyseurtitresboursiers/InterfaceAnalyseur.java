/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package analyseurtitresboursiers;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author jocelynm
 */
public class InterfaceAnalyseur extends javax.swing.JFrame {
    
    private String description;
    private String symboleTitre;
    private String nomTitre;
    JFreeChart prixJFreechart;
    JFreeChart indiceJFreechart;
    private static AnalysteMacd analyste;
    private static TitresBoursiers tsx;

    /**
     * Creates new form InterfaceAnalyseur
     */
    public InterfaceAnalyseur() throws ParseException {
        
        tsx = new TitresBoursiers();
        initComponents();
        updateComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panneauAnalyse = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        labelRecommandation = new javax.swing.JLabel();
        texteRecommandation = new javax.swing.JTextField();
        prixChartPanel = new javax.swing.JPanel();
        prixJFreechart = creerGraphePrix();
        prixChartPanel = new ChartPanel(prixJFreechart, true, true, true, false, true);
        indiceChartPanel = new javax.swing.JPanel();
        indiceJFreechart = creerGrapheIndice();
        indiceChartPanel = new ChartPanel(indiceJFreechart, true, true, true, false, true);
        panneauConfiguration = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Titre Boursier");

        jTextField1.setText("Description");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        labelRecommandation.setText("Recommandation");

        texteRecommandation.setBackground(new java.awt.Color(204, 204, 204));
        texteRecommandation.setColumns(20);

        javax.swing.GroupLayout prixChartPanelLayout = new javax.swing.GroupLayout(prixChartPanel);
        prixChartPanel.setLayout(prixChartPanelLayout);
        prixChartPanelLayout.setHorizontalGroup(
            prixChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );
        prixChartPanelLayout.setVerticalGroup(
            prixChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 392, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout indiceChartPanelLayout = new javax.swing.GroupLayout(indiceChartPanel);
        indiceChartPanel.setLayout(indiceChartPanelLayout);
        indiceChartPanelLayout.setHorizontalGroup(
            indiceChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );
        indiceChartPanelLayout.setVerticalGroup(
            indiceChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 392, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panneauAnalyseLayout = new javax.swing.GroupLayout(panneauAnalyse);
        panneauAnalyse.setLayout(panneauAnalyseLayout);
        panneauAnalyseLayout.setHorizontalGroup(
            panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panneauAnalyseLayout.createSequentialGroup()
                .addGroup(panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panneauAnalyseLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panneauAnalyseLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panneauAnalyseLayout.createSequentialGroup()
                                .addComponent(prixChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                .addComponent(indiceChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panneauAnalyseLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelRecommandation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(texteRecommandation, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        panneauAnalyseLayout.setVerticalGroup(
            panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panneauAnalyseLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(60, 60, 60)
                .addGroup(panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prixChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indiceChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(panneauAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRecommandation)
                    .addComponent(texteRecommandation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        jTabbedPane1.addTab("Analyse", panneauAnalyse);

        javax.swing.GroupLayout panneauConfigurationLayout = new javax.swing.GroupLayout(panneauConfiguration);
        panneauConfiguration.setLayout(panneauConfigurationLayout);
        panneauConfigurationLayout.setHorizontalGroup(
            panneauConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1228, Short.MAX_VALUE)
        );
        panneauConfigurationLayout.setVerticalGroup(
            panneauConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Configuration", panneauConfiguration);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    private static JFreeChart creerGraphePrix() {

        JFreeChart jfreechart = null;

        try {
            XYDataset xydataset = creerDatasetPrix();

            String s = "Prix";
            jfreechart = ChartFactory.createTimeSeriesChart(s, "date", "prix", xydataset, false, true, false);
            XYPlot xyplot = (XYPlot) jfreechart.getPlot();
            NumberAxis numberaxis = (NumberAxis) xyplot.getRangeAxis();
            numberaxis.setLowerMargin(0.40000000000000002D);
            DecimalFormat decimalformat = new DecimalFormat("00.00");
            numberaxis.setNumberFormatOverride(decimalformat);
            XYItemRenderer xyitemrenderer = xyplot.getRenderer();
            xyitemrenderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator("{0}: ({1}, {2})", new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")));

            xyplot.mapDatasetToRangeAxis(1, 1);
            XYBarRenderer xybarrenderer = new XYBarRenderer(0.20000000000000001D);
            xybarrenderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator("{0}: ({1}, {2})", new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0,000.00")));
            xyplot.setRenderer(1, xybarrenderer);

        } catch (ParseException exception) {

            System.err.println(exception.getMessage());
        }

        return jfreechart;
    }

    private static JFreeChart creerGrapheIndice() {

        JFreeChart jfreechart = null;

        try {
            XYDataset xydataset = creerDatasetIndice();

            String s = "Indice";
            jfreechart = ChartFactory.createTimeSeriesChart(s, "date", "indice", xydataset, false, true, false);
            XYPlot xyplot = (XYPlot) jfreechart.getPlot();
            NumberAxis numberaxis = (NumberAxis) xyplot.getRangeAxis();
            numberaxis.setLowerMargin(0.40000000000000002D);
            DecimalFormat decimalformat = new DecimalFormat("00.00");
            numberaxis.setNumberFormatOverride(decimalformat);
            XYItemRenderer xyitemrenderer = xyplot.getRenderer();
            xyitemrenderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator("{0}: ({1}, {2})", new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")));

            xyplot.mapDatasetToRangeAxis(1, 1);
            XYBarRenderer xybarrenderer = new XYBarRenderer(0.20000000000000001D);
            xybarrenderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator("{0}: ({1}, {2})", new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0,000.00")));
            xyplot.setRenderer(1, xybarrenderer);

        } catch (ParseException exception) {

            System.err.println(exception.getMessage());
        }

        return jfreechart;
    }

    private static XYDataset creerDatasetPrix() throws ParseException {

        final TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries prixFermeture = new TimeSeries("Prix fermeture");
        TimeSeries emaMax = new TimeSeries("EMA Max");
        TimeSeries emaMin = new TimeSeries("EMA Min");

        analyste = new AnalysteMacd(tsx.getTsx());

        // Prix fermeture
        System.out.println("Taille de l'historique: " + analyste.getCotesBoursieres().size());

        for (int i = 0; i < analyste.getCotesBoursieres().size(); i++) {

            //TODO, s'assurer qu'il n'y a pas de doublons dans la liste sinon le graphique ne sera pas generer

            System.out.println(analyste.getCotesBoursieres().get(i).toString());
            prixFermeture.add(new Day(analyste.getCotesBoursieres().get(i).getDate()), analyste.getCotesBoursieres().get(i).getPrixCloture());
        }

        dataset.addSeries(prixFermeture);

        // EMA Max
        for (int i = 0; i < analyste.getHistoriqueCoteEmaMax().size(); i++) {

            //TODO, s'assurer qu'il n'y a pas de doublons dans la liste sinon le graphique ne sera pas generer

            System.out.println(analyste.getHistoriqueCoteEmaMax().get(i).toString());
            emaMax.add(new Day(analyste.getHistoriqueCoteEmaMax().get(i).getDate()), analyste.getHistoriqueCoteEmaMax().get(i).getPrix());
        }

        dataset.addSeries(emaMax);

        // EMA Min
        for (int i = 0; i < analyste.getHistoriqueCoteEmaMin().size(); i++) {

            //TODO, s'assurer qu'il n'y a pas de doublons dans la liste sinon le graphique ne sera pas generer

            System.out.println(analyste.getHistoriqueCoteEmaMin().get(i).toString());
            emaMin.add(new Day(analyste.getHistoriqueCoteEmaMin().get(i).getDate()), analyste.getHistoriqueCoteEmaMin().get(i).getPrix());
        }

        dataset.addSeries(emaMin);

        return dataset;
    }

    private static XYDataset creerDatasetIndice() throws ParseException {

        final TimeSeriesCollection dataset = new TimeSeriesCollection();
        TimeSeries macd = new TimeSeries("MACD");
        TimeSeries ligneSignal = new TimeSeries("Ligne Signal");

        analyste = new AnalysteMacd(tsx.getTsx());

        // MACD
        for (int i = 0; i < analyste.getHistoriqueIndiceMacd().size(); i++) {

            //TODO, s'assurer qu'il n'y a pas de doublons dans la liste sinon le graphique ne sera pas generer

            System.out.println(analyste.getHistoriqueIndiceMacd().get(i).toString());
            macd.add(new Day(analyste.getHistoriqueIndiceMacd().get(i).getDate()), analyste.getHistoriqueIndiceMacd().get(i).getIndice());
        }

        dataset.addSeries(macd);

        // Ligne Signal
        for (int i = 0; i < analyste.getHistoriqueIndiceSignal().size(); i++) {

            //TODO, s'assurer qu'il n'y a pas de doublons dans la liste sinon le graphique ne sera pas generer

            System.out.println(analyste.getHistoriqueIndiceSignal().get(i).toString());
            ligneSignal.add(new Day(analyste.getHistoriqueIndiceSignal().get(i).getDate()), analyste.getHistoriqueIndiceSignal().get(i).getIndice());
        }

        dataset.addSeries(ligneSignal);

        return dataset;
    }
    
    private void updateComponents() {
        
        System.out.println("estAchatInteractif() " + analyste.estAchatInteractif());

        if (analyste.estAchatInteractif()) {
            Font font = new Font("Verdana", Font.BOLD, 12);
            texteRecommandation.setFont(font);
            texteRecommandation.setForeground(Color.WHITE);
            texteRecommandation.setBackground(Color.GREEN);
            texteRecommandation.setText("ACHAT");
        } else {

            if (analyste.estGardeInteractif()) {
                Font font = new Font("Verdana", Font.BOLD, 12);
                texteRecommandation.setFont(font);
                texteRecommandation.setForeground(Color.WHITE);
                texteRecommandation.setBackground(new Color(224,217,27));
                texteRecommandation.setText("GARDE");
            } else if (analyste.estNeutreInteractif()) {
                Font font = new Font("Verdana", Font.BOLD, 12);
                texteRecommandation.setFont(font);
                texteRecommandation.setForeground(Color.WHITE);
                texteRecommandation.setBackground(Color.GRAY);
                texteRecommandation.setText("NEUTRE");
            } else {
                Font font = new Font("Verdana", Font.BOLD, 12);
                texteRecommandation.setFont(font);
                texteRecommandation.setForeground(Color.WHITE);
                texteRecommandation.setBackground(Color.RED);
                texteRecommandation.setText("VENDRE");
            }
        }

        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel indiceChartPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelRecommandation;
    private javax.swing.JPanel panneauAnalyse;
    private javax.swing.JPanel panneauConfiguration;
    private javax.swing.JPanel prixChartPanel;
    private javax.swing.JTextField texteRecommandation;
    // End of variables declaration//GEN-END:variables
}
